-- 1. List all unique cities where customers are located.\
SELECT DISTINCT [customer_city]
FROM [dbo].[customers];

-- 2. Count the number of orders placed in 2017.
SELECT COUNT([order_id]) AS "Count_orders"
FROM [dbo].[orders]
WHERE YEAR([order_purchase_timestamp]) = 2017;

-- 3. Find the total sales per category.
SELECT p.[product_category], SUM(pm.[payment_value]) AS "Total_Sale_per_Category"
FROM [dbo].[products] p 
JOIN [dbo].[order_items] oi
ON p.[product_id] = oi.[product_id]
JOIN [dbo].[payments] pm
ON pm.[order_id] = oi.[order_id]
GROUP BY p.[product_category];

-- 4. Calculate the percentage of orders that were paid in installments.
SELECT SUM( CASE WHEN [payment_installments]>0 THEN 1 ELSE 0 END) *100.0/ COUNT(*) AS "Percentage_Of_Orders_paid_in_Installments"
FROM [dbo].[payments] ;

-- 5. Count the number of customers from each state.
SELECT [customer_state],COUNT([customer_state]) AS "Total_Customers_from_each_state"
FROM [dbo].[customers]
GROUP BY [customer_state]
ORDER BY [customer_state] ASC;

-- 6. Calculate the number of orders per month in 2018.
SELECT MONTH([order_purchase_timestamp]) AS "Month", COUNT([order_id]) AS "Total_Orders_per_Month_in_2018"
FROM [dbo].[orders]
WHERE YEAR([order_purchase_timestamp]) = 2018
GROUP BY MONTH([order_purchase_timestamp])
ORDER BY MONTH([order_purchase_timestamp]) ASC;

-- 7. Find the average number of products per order, grouped by customer city.
WITH CTE AS
(
	SELECT o.[order_id], o.[customer_id], COUNT(oi.[order_id]) AS oc
	FROM [dbo].[orders] o
	JOIN [dbo].[order_items] oi
	ON o.[order_id] = oi.[order_id]
	GROUP BY o.order_id, o.customer_id
)
SELECT [customer_city], AVG(cte.oc) AS "AVG_Product_per_Order"
FROM [dbo].[customers] c
JOIN CTE cte
ON cte.[customer_id] = c.[customer_id]
GROUP BY [customer_city];

-- 8. Calculate the percentage of total revenue contributed by each product category.
WITH category_sales AS
(
	SELECT pd.product_category, SUM(pm.[payment_value]) AS sumofeach
	FROM [dbo].[payments] pm
	JOIN [dbo].[order_items] oi
	ON  oi.order_id = pm.order_id
	JOIN [dbo].[products] pd
	ON pd.product_id = oi.product_id
	GROUP BY pd.product_category
),
total_sales AS (
  SELECT SUM([payment_value]) AS overall_total 
  FROM [dbo].[payments]
)
SELECT 
  cs.product_category,
  ROUND((cs.sumofeach / ts.overall_total) * 100, 2) AS sales_percentage
FROM category_sales cs, total_sales ts
ORDER BY sales_percentage DESC;

-- 9. Calculate the total revenue generated by each seller, and rank them by revenue.
WITH seller_revenue AS (
  SELECT 
    order_items.seller_id, 
    ROUND(SUM(payments.payment_value),2) AS revenue
  FROM order_items
  JOIN payments ON order_items.order_id = payments.order_id
  GROUP BY order_items.seller_id
)
SELECT 
  *, 
  DENSE_RANK() OVER (ORDER BY revenue DESC) AS rn
FROM seller_revenue;

-- 10. Calculate the moving average of order values 
--     for each customer over their order history.
WITH customer_payments AS (
  SELECT 
    orders.customer_id, 
    orders.order_purchase_timestamp, 
    payments.payment_value AS payment
  FROM payments
  JOIN orders ON payments.order_id = orders.order_id
)
SELECT 
  customer_id, 
  order_purchase_timestamp, 
  payment,
  AVG(payment) OVER (
    PARTITION BY customer_id 
    ORDER BY order_purchase_timestamp 
    ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
  ) AS mov_avg
FROM customer_payments;

-- 11. Calculate the cumulative sales per month for each year.
SELECT YEAR(o.[order_purchase_timestamp]) AS Year, MONTH(o.[order_purchase_timestamp]) AS Month, 
	   ROUND(SUM(pm.payment_value),2) AS "Total_of_sales_per_month_for_each_year"
FROM [dbo].[payments] pm
JOIN [dbo].[orders] o
ON pm.order_id = o.order_id
GROUP BY YEAR(o.[order_purchase_timestamp]), MONTH(o.[order_purchase_timestamp])
ORDER BY YEAR(o.[order_purchase_timestamp]), MONTH(o.[order_purchase_timestamp]) ASC;

-- 12. Calculate the year-over-year growth rate of total sales.
with CTE as
(
	select year(orders.order_purchase_timestamp) as years,
		   round(sum(payments.payment_value),2) as payment 
	from orders 
	join payments
	on orders.order_id = payments.order_id
	group by year(orders.order_purchase_timestamp) 
)
select years, 
	   ((payment - lag(payment, 1) over(order by years))/
        lag(payment, 1) over(order by years)) * 100 
from CTE

-- 13. Calculate the retention rate of customers, defined as the percentage of  
--     customers who make another purchase within 6 months of their first purchase.
WITH first_orders AS (
  SELECT 
    customer_id, 
    MIN(order_purchase_timestamp) AS first_purchase_date
  FROM orders
  GROUP BY customer_id
)
, next_orders AS (
  SELECT 
    o.customer_id, 
    o.order_purchase_timestamp, 
    f.first_purchase_date
  FROM orders o
  JOIN first_orders f ON o.customer_id = f.customer_id
  WHERE o.order_purchase_timestamp > f.first_purchase_date
    AND DATEDIFF(MONTH, f.first_purchase_date, o.order_purchase_timestamp) <= 6
)
SELECT 
  (SELECT COUNT(DISTINCT customer_id) FROM next_orders) * 100.0 / 
  (SELECT COUNT(DISTINCT customer_id) FROM first_orders) AS retention_rate;

-- 14. Identify the top 3 customers who spent the most money in each year.
WITH CTE AS
(
	SELECT YEAR(o.order_purchase_timestamp) AS Year, 
		   o.[customer_id],
		   SUM(pm.[payment_value]) AS top3
	FROM [dbo].[payments] pm 
	JOIN [dbo].[orders] o
	ON o.order_id = pm.order_id
	GROUP BY YEAR(o.order_purchase_timestamp),  o.[customer_id]
)
SELECT *
FROM (
		SELECT Year, [customer_id], top3,
			   DENSE_RANK() OVER( PARTITION BY Year ORDER BY top3 DESC) AS ranking
		FROM CTE
	 ) ranked
WHERE ranking <= 3;







select years, customer_id, payment, d_rank
from
(select year(orders.order_purchase_timestamp) years,
orders.customer_id,
sum(payments.payment_value) payment,
dense_rank() over(partition by year(orders.order_purchase_timestamp)
order by sum(payments.payment_value) desc) d_rank
from orders join payments 
on payments.order_id = orders.order_id
group by year(orders.order_purchase_timestamp),
orders.customer_id) as a
where d_rank <= 3 ;